/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef click_TYPES_H
#define click_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace thrift {

struct StreamEvent {
  enum type {
    CLICK = 0,
    IMPRESSION = 1
  };
};

extern const std::map<int, const char*> _StreamEvent_VALUES_TO_NAMES;

class AdEvent;

typedef struct _AdEvent__isset {
  _AdEvent__isset() : type(false), id(false) {}
  bool type :1;
  bool id :1;
} _AdEvent__isset;

class AdEvent {
 public:

  AdEvent(const AdEvent&);
  AdEvent& operator=(const AdEvent&);
  AdEvent() : type((StreamEvent::type)0), id(0) {
  }

  virtual ~AdEvent() throw();
  StreamEvent::type type;
  int64_t id;

  _AdEvent__isset __isset;

  void __set_type(const StreamEvent::type val);

  void __set_id(const int64_t val);

  bool operator == (const AdEvent & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AdEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AdEvent &a, AdEvent &b);

inline std::ostream& operator<<(std::ostream& out, const AdEvent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
