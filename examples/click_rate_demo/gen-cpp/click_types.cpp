/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "click_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thrift {

int _kStreamEventValues[] = {
  StreamEvent::CLICK,
  StreamEvent::IMPRESSION
};
const char* _kStreamEventNames[] = {
  "CLICK",
  "IMPRESSION"
};
const std::map<int, const char*> _StreamEvent_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kStreamEventValues, _kStreamEventNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


AdEvent::~AdEvent() throw() {
}


void AdEvent::__set_type(const StreamEvent::type val) {
  this->type = val;
}

void AdEvent::__set_id(const int64_t val) {
  this->id = val;
}

uint32_t AdEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (StreamEvent::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AdEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AdEvent");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdEvent &a, AdEvent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

AdEvent::AdEvent(const AdEvent& other1) {
  type = other1.type;
  id = other1.id;
  __isset = other1.__isset;
}
AdEvent& AdEvent::operator=(const AdEvent& other2) {
  type = other2.type;
  id = other2.id;
  __isset = other2.__isset;
  return *this;
}
void AdEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AdEvent(";
  out << "type=" << to_string(type);
  out << ", " << "id=" << to_string(id);
  out << ")";
}

} // namespace
